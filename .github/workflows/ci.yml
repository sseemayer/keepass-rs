---
name: CI on Pull Requests

on:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  commitlint:
    name: Lint Commit Messages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v5
        with:
          configFile: commitlintrc.json

  doc:
    name: Build Doc
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
          components: rustfmt
      - name: run cargo doc
        run: cargo doc

  check:
    name: Check
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-hack
      - name: typecheck the tests
        run: cargo check --tests
      - name: run cargo check on all feature combinations
        run: cargo hack check --feature-powerset --no-dev-deps

  build-windows:
    name: Build the project (Windows)
    runs-on: windows-latest
    env:
      RUSTFLAGS: -D warnings
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Build the project with the default features
        run: cargo build

      - name: Build the project with all the features
        run: cargo build --all-features

      - name: Build the project with no default features
        run: cargo build --no-default-features

  test:
    name: Test Suite on ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: x86_64
            with_cross_compilation: false
          - os: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
            name: armv7
            with_cross_compilation: true
          # - os: ubuntu-latest-arm64
          #   target: aarch64-unknown-linux-gnu
          #   name: armv8
          #   with_cross_compilation: false

    env:
      RUSTFLAGS: -D warnings
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: install ${{ matrix.target }} target
        if: matrix.with_cross_compilation
        run: rustup target add ${{ matrix.target }}

      - name: Install cross
        if: matrix.with_cross_compilation
        run: cargo install cross

      - name: run cargo test
        if: '!matrix.with_cross_compilation'
        run: cargo test --all-features

      - name: run cross test
        if: matrix.with_cross_compilation
        run: cross test --release --target ${{ matrix.target }} --all-features

  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: test
    if: always()
    steps:
      - name: Check test job result
        if: needs.test.result != 'success'
        run: |
          echo "The test job was not successful (result: ${{ needs.test.result }})."
          exit 1
      - name: All tests passed
        run: echo "All tests passed"

  msrv:
    name: MSRV Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@v11
      - name: check msrv
        run: |
          nix develop --command cargo msrv verify

  formatting:
    name: Code Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt
      - name: running rustfmt
        run: |
          files=$(find . -name '*.rs')
          IFS=$'\n'; for file in $files; do
            rustfmt --check "$file"
          done

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@v11
      - name: Generate code coverage
        run: |
          nix develop --command cargo tarpaulin --verbose --timeout 120
